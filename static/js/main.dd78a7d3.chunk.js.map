{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","backgroundColor","heading","color","value","onChange","event","console","log","target","rows","newText","toUpperCase","toLowerCase","split","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","showAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dd78a7d3.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { a } from 'react-router-dom'\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    {/* <li className=\"nav-item active\">\n                        <a className=\"nav-a\" href=\"#\">Home</a>\n                    </li> */}\n                    {/* <li className=\"nav-item\">\n                        <a  className=\"nav-a\" href=\"/about\">About</a>\n                    </li> */}\n                    {/* <li className=\"nav-item dropdown\">\n                        <a className=\"nav-a dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            Dropdown\n                        </a>\n                        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                            <a className=\"dropdown-item\" href=\"#\">Action</a>\n                            <a className=\"dropdown-item\" href=\"#\">Another action</a>\n                            <div className=\"dropdown-divider\"></div>\n                            <a className=\"dropdown-item\" href=\"#\">Something else here</a>\n                        </div>\n                    </li> */}\n                    {/* <li className=\"nav-item\">\n                        <a className=\"nav-a disabled\" href=\"#\" tabIndex=\"-1\" aria-disabled=\"true\">Disabled</a>\n                    </li> */}\n                </ul>\n                <form className=\"form-inline my-2 my-lg-0\">\n                    {/* <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                    <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> */}\n                    <div className={`form-switch form-check text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\n\n                    </div>\n                </form>\n                {/* <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label> */}\n\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: \"set title here\"\n}","import React, { useState } from 'react'\n\n\n\nexport default function TextForm(props) {\n    const handleUpClick = () => {\n        console.log(\"uppercase was clicked\");\n        let newText = text.toUpperCase();\n        setText(newText);\n    }\n\n    const handleLoClick = () => {\n        console.log(\"lowercase was clicked\");\n        let newText = text.toLowerCase();\n        setText(newText);\n    }\n\n    const handleClearClick = () => {\n        console.log(\"clear text was clicked\");\n        let newText = \"\";\n        setText(newText);\n    }\n\n    // handle events\n    const handleOnChange = (event) => {\n        console.log(\"on change\");\n        setText(event.target.value);\n    }\n\n    // react hooks\n    const [text, setText] = useState('Enter the text here');\n    // setText(\"new text\");\n    return (\n        <>\n            <div className=\"container\" style={{backgroundColor:props.mode==='dark'?'white':'black'}}>\n                <h1>{props.heading}</h1>\n                <label htmlFor=\"exampleFormControlTextarea1\">Example textarea</label>\n                <textarea style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}} value={text} onChange={handleOnChange} className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\"></textarea>\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to uppercase</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to lowercase</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\n\n            </div>\n            <div className=\"container my-3\" style={{backgroundColor:props.mode==='dark'?'white':'black'}}>\n                <h2>Your text summary</h2>\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\n                <p>{text.split(\" \").length * 0.08} Minutes read</p>\n                <h2>Preview</h2>\n                <p>{text}</p>\n            </div>\n\n        </>\n    )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\n        </div>\n    )\n}\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n// let name = \"Anurag\"\nfunction App() {\n  const [mode, setMode] = useState(\"light\") //whether the dark mode is enabled or not\n  const [alert, setAlert] = useState(null)\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"Dark mode enabled\", \"success\");\n      document.title = \"TextUtils - dark mode\";\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode enabled\", \"success\");\n      document.title = \"TextUtils - light mode\";\n    }\n  }\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000)\n  }\n\n\n  return (\n    <>\n      {/* props title passed to custom component */}\n      {/* <Router> */}\n      <Navbar title=\"TextUtils2\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n        {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}></TextForm>\n          {/* </Route>\n        </Switch>\n      </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}